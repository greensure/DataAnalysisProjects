<<<<<<< HEAD
trainDF <- df.customers[-index,]
library(cluster)
library(factoextra)
# library(dbscan)
=======
# Mall_Customers <- transform(Mall_Customers, Gender = as.integer(Gender))
# Display new data frame
head(Mall_Customers)
par(mfrow=c(2,2))
hist(Mall_Customers$Gender, col = "wheat")
hist(Mall_Customers$Age, col = "skyblue")
hist(Mall_Customers$Annual.Income, col = "green")
hist(Mall_Customers$Spending.Score, col = "coral2")
# Handling outliers
# As we can appreciate in the graph above we have an outlier in Annual.Income feature, it is out of the confidence interval so we decided to drop that values because only two samples have that value.
print(max(Mall_Customers$Annual.Income))
Mall_Customers1 = subset(Mall_Customers, Mall_Customers$Annual.Income != max(Mall_Customers$Annual.Income))
boxplot(Mall_Customers1, col="skyblue")
corrplot(cor(Mall_Customers1), addCoef.col = 'black', method="color")
# TODO: analysis the correlation among features
summary(Mall_Customers1, maxsum = 7, digits = max(3, getOption("digits")-3))
# Remove ID
Mall_Customers1 <- Mall_Customers[, -1]
head(Mall_Customers1)
# Scale() is a generic function whose default method centers and/or scales the columns of a numeric matrix.
Annual.Income.Scale <- as.data.frame(scale(Mall_Customers1$Annual.Income))
# Annual.Income.Scale
df.customers <- data.frame(Gender = Mall_Customers$Gender,
Age = Mall_Customers$Age,
Annual.Income = Annual.Income.Scale,
Spending.Score = Mall_Customers$Spending.Score)
colnames(df.customers)[3] <- "Annual.Income"
head(df.customers)
par(mfrow=c(2,2))
hist(df.customers$Gender, col = "wheat")
hist(df.customers$Age, col = "skyblue")
hist(df.customers$Annual.Income, col = "green")
hist(df.customers$Spending.Score, col = "coral2")
library(ggplot2)
# Ref: https://www.r-bloggers.com/2021/11/how-to-perform-univariate-analysis-in-r/
par(mfrow=c(2,2))
plot(density(df.customers$Gender))
plot(density(df.customers$Age))
plot(density(df.customers$Annual.Income))
plot(density(df.customers$Spending.Score))
par(mfrow=c(2,2))
ySpendingScore <- df.customers$Spending.Score
# 01 Gender-Spending.Score Q-Q Plot
xGender <- df.customers$Gender
qqplot(xGender, ySpendingScore, xlab = "Gender", ylab = "Spending.Score", main = "Gender-Spending.Score Q-Q Plot")
# qqline(ySpendingScore, col = "steelblue", lwd = 2)
# 02 Age-Spending.Score Q-Q Plot
xAge <- df.customers$Age
qqplot(xAge, ySpendingScore, xlab = "Age", ylab = "Spending.Score", main = "Age-Spending.Score Q-Q Plot")
# 03 Annual.Income-Spending.Score Q-Q Plot
xAnnualIncome <- df.customers$Annual.Income
qqplot(xAnnualIncome, ySpendingScore, xlab = "Annual.Income", ylab = "Spending.Score", main = "Annual.Income-Spending.Score Q-Q Plot")
genderTable <- table(df.customers$Gender)
# barplot
barplot(genderTable, main = "Gender Comparison Using BarPlot",
ylab = "Count",
xlab = "Gender",
col = rainbow(2),
legend = rownames(genderTable),
names.arg = c("Female", "Male"))
# A pie chart
pct <- round(genderTable/sum(genderTable)*100)
lbs <- paste(c("Female","Male"), " ", pct, "%", sep=" ")
library(plotrix)
pie3D(genderTable, labels=lbs, main="Pie Chart Showing Ratio of Female and Male")
summary(df.customers$Age)
# hist plot
hist(df.customers$Age,
col="blue",
main="Histogram to Show Count of Age Class",
xlab="Age Class",
ylab="Frequency",
labels=TRUE)
# boxplot plot
boxplot(df.customers$Age, col="yellow", main="Boxplot for Descriptive Analysis of Age")
summary(df.customers$Annual.Income)
hist(df.customers$Annual.Income,
col="yellow",
main="Histogram for Annual Income",
xlab="Annual Income Class",
ylab="Frequency",
labels=TRUE)
plot(density(df.customers$Annual.Income),
col="yellow",
main="Density Plot for Annual Income",
xlab="Annual Income Class",
ylab="Density")
polygon(density(df.customers$Annual.Income),
col="blue")
summary(df.customers$Spending.Score)
boxplot(df.customers$Spending.Score,
horizontal=TRUE,
col="red",
main="BoxPlot for Descriptive Analysis of Spending Score")
hist(df.customers$Spending.Score,
main="HistoGram for Spending Score",
xlab="Spending Score Class",
ylab="Frequency",
col="green",
labels=TRUE)
paste("Here are clusters on the original data set")
plot(df.customers)
# Load final data set
df.customers <- data.frame(Annual.Income = df.customers$Annual.Income,
Spending.Score = df.customers$Spending.Score)
head(df.customers)
paste("Here are clusters on the final data set")
plot(df.customers, pch=17)
library(caret)
set.seed(1)
index <- createDataPartition(df.customers$Spending.Score, p = 0.2, list = FALSE)
testDF <- df.customers[index,]
trainDF <- df.customers[-index,]
corrplot(cor(trainDF), addCoef.col = 'black', method="color")
library(cluster)
# library(factoextra)
library(dbscan)
>>>>>>> da4d391fe8a48ff6d45065c35cd2b579432534cd
library(fpc)
fviz_nbclust(trainDF, kmeans, method="wss")
fviz_nbclust(trainDF, kmeans, method="silhouette")
k5 <- kmeans(trainDF, centers = 5, nstart = 25)
k3 <- kmeans(trainDF, centers = 3, nstart = 25)
k6 <- kmeans(trainDF, centers = 6, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k5, geom = "point", data = trainDF) + ggtitle("k = 5")
p2 <- fviz_cluster(k3, geom = "point",  data = trainDF) + ggtitle("k = 3")
p3 <- fviz_cluster(k6, geom = "point",  data = trainDF) + ggtitle("k = 6")
library(gridExtra)
grid.arrange(p1, p2, p3, nrow = 2)
cat(sprintf("1. k = 5, the Between SS / Total SS is %.3f", k5$betweenss/k5$totss), "\n")
cat(sprintf("2. k = 3, the Between SS / Total SS is %.3f", k3$betweenss/k3$totss), "\n")
<<<<<<< HEAD
cat(sprintf("3. k = 6, the Between SS / Total SS is %.3f", k6$betweenss/k6$totss), "\n")
Data_income_score_age <- df.customers
=======
cat(sprintf("2. k = 6, the Between SS / Total SS is %.3f", k6$betweenss/k6$totss), "\n")
Data_income_score_age = Mall_Customers1[,-1]
fviz_nbclust(Data_income_score_age, kmeans, method="wss")
fviz_nbclust(Data_income_score_age, kmeans, method="silhouette")
>>>>>>> da4d391fe8a48ff6d45065c35cd2b579432534cd
kmeansModel_income_score_age = kmeans(Data_income_score_age,6, nstart = 25)
library(scatterplot3d)
colors <- c("red", "blue", "green", "purple", "orange", "yellow")
colors <- colors[kmeansModel_income_score_age$cluster]
scatterplot3d(x = Data_income_score_age$Annual.Income,
y = Data_income_score_age$Age,
z = Data_income_score_age$Spending.Score,
box = FALSE,
color = colors,
pch=16,
main = "3D Cluster plot on the Optimal Number")
library(factoextra)
fviz_cluster(kmeansModel_income_score_age,
data = Data_income_score_age,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
library(factoextra)
fviz_cluster(k6, data = df.customers,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
<<<<<<< HEAD
=======
fviz_nbclust(Mall_Customers1, kmeans, method="wss")
fviz_nbclust(Mall_Customers1, kmeans, method="silhouette")
kmeansModel_all= kmeans(Mall_Customers1,6, nstart = 25)
library(factoextra)
fviz_cluster(kmeansModel_all, data = Mall_Customers1,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Clusters using all features"
)
View(Data_income_score_age)
View(kmeansModel_income_score_age)
# Create the plot
p <- plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'Age'),
yaxis = list(title = 'Annual.Income'),
zaxis = list(title = 'Spending.Score'))
)
# Create the plot
p <- plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster)
install.packages("plotly")
library(plotly)
Data_income_score_age = Mall_Customers1[,-1]
fviz_nbclust(Data_income_score_age, kmeans, method="wss")
fviz_nbclust(Data_income_score_age, kmeans, method="silhouette")
kmeansModel_income_score_age = kmeans(Data_income_score_age,6, nstart = 25)
library(scatterplot3d)
colors <- c("red", "blue", "green","purple","orange","yellow")
colors <- colors[kmeansModel_income_score_age$cluster]
scatterplot3d(x=Data_income_score_age$Annual.Income,y=Data_income_score_age$Age,z=Data_income_score_age$Spending.Score,box = FALSE,color=colors,pch=16,main = "3D Cluster plot")
library(plotly)
# Create the plot
p <- plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'Age'),
yaxis = list(title = 'Annual.Income'),
zaxis = list(title = 'Spending.Score'))
)
library(factoextra)
fviz_cluster(kmeansModel_income_score_age, data = Data_income_score_age,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
# Create the plot
p <- plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'Age'),
yaxis = list(title = 'Annual.Income'),
zaxis = list(title = 'Spending.Score'))
)
# Create the plot
plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'Age'),
yaxis = list(title = 'Annual.Income'),
zaxis = list(title = 'Spending.Score'))
)
p <-
# Create the plot
plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'Age'),
yaxis = list(title = 'Annual.Income'),
zaxis = list(title = 'Spending.Score'))
)
library(plotly)
# Create the plot
plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'Age'),
yaxis = list(title = 'Annual.Income'),
zaxis = list(title = 'Spending.Score'))
)
library(plotly)
# Create the plot
plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'Age'),
yaxis = list(title = 'Annual.Income'),
zaxis = list(title = 'Spending.Score'))
)
library(plotly)
# Create the plot
plot_ly(Data_income_score_age, x = Data_income_score_age$Age, y = Data_income_score_age$Annual.Income, z = Data_income_score_age$Spending.Score, marker = kmeansModel_income_score_age$cluster)
Data_income_score_age = Mall_Customers1[,-1]
fviz_nbclust(Data_income_score_age, kmeans, method="wss")
fviz_nbclust(Data_income_score_age, kmeans, method="silhouette")
kmeansModel_income_score_age = kmeans(Data_income_score_age,6, nstart = 25)
library(scatterplot3d)
colors <- c("red", "blue", "green","purple","orange","yellow")
colors <- colors[kmeansModel_income_score_age$cluster]
scatterplot3d(x=Data_income_score_age$Annual.Income,y=Data_income_score_age$Age,z=Data_income_score_age$Spending.Score,box = FALSE,color=colors,pch=16,main = "3D Cluster plot")
library(factoextra)
fviz_cluster(kmeansModel_income_score_age, data = Data_income_score_age,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
Data_income_score_gender = Mall_Customers1[,-2]
kmeansModel_income_score_gender= kmeans(Data_income_score_gender,6, nstart = 25)
library(scatterplot3d)
colors <- c("red", "blue", "green","purple","orange","yellow")
colors <- colors[kmeansModel_income_score_gender$cluster]
scatterplot3d(x=Data_income_score_gender,box = FALSE,color=colors,pch=16,main = "3D Cluster plot")
library(factoextra)
fviz_cluster(kmeansModel_income_score_gender, data = Data_income_score_gender,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
fviz_nbclust(Mall_Customers1, kmeans, method="wss")
fviz_nbclust(Mall_Customers1, kmeans, method="silhouette")
kmeansModel_all= kmeans(Mall_Customers1,6, nstart = 25)
library(factoextra)
fviz_cluster(kmeansModel_all, data = Mall_Customers1,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Clusters using all features"
)
kmeansModel_all= kmeans(Mall_Customers1,6, nstart = 25)
library(factoextra)
fviz_cluster(kmeansModel_all, data = Mall_Customers1,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Clusters using all features"
)
source("~/IIT/DataPrep&Anal/project/CSP571/CSP571 Project R code-Ver3.Rmd")
Data_income_score_age <- df.customers
kmeansModel_income_score_age = kmeans(Data_income_score_age,6, nstart = 25)
library(scatterplot3d)
colors <- c("red", "blue", "green", "purple", "orange", "yellow")
colors <- colors[kmeansModel_income_score_age$cluster]
scatterplot3d(x = Data_income_score_age$Annual.Income,
y = Data_income_score_age$Age,
z = Data_income_score_age$Spending.Score,
box = FALSE,
color = colors,
pch=16,
main = "3D Cluster plot with Age and Annual.Income")
>>>>>>> da4d391fe8a48ff6d45065c35cd2b579432534cd
# Clean environment
rm(list=ls())
# Load libraries
library(readr)
library(corrplot)
# Note! Set the new working Directory
# Every time you synchronize code from the repository, it's better to check and reset the working directory based on your development environment first. If you don't want to set the repository, you can comment the following line.
# setwd("D:/WorkSpace/RWorkSpace/Project")
Mall_Customers <- read.csv("Mall_Customers.csv",
header = TRUE,
sep = ",",
stringsAsFactors=TRUE,
col.names = c("CustomerID","Gender","Age","Annual Income","Spending Score"))
# Data Exploration
## Read data
head(Mall_Customers)
## Features types
str(Mall_Customers)
# plot(Mall_Customers)
# Explore missing value patterns
# Check if there are NA values
NANumbers <- sum(is.na(Mall_Customers))
paste("**** The number of NA values in this data set =", NANumbers)
# Plotting percentage of missing values per feature
library(naniar)
gg_miss_var(Mall_Customers, show_pct = TRUE)
# Quickly summarize the values in a data frame here
summary(Mall_Customers)
#  Compactly displaying the internal structure of data frame: Mall_Customers.
# str(Mall_Customers)
# Set dummy variables
Mall_Customers$Gender<-as.integer(Mall_Customers$Gender)
# Mall_Customers <- transform(Mall_Customers, Gender = as.integer(Gender))
# Display new data frame
head(Mall_Customers)
# Handling outliers: check the outliers by the boxplotx
boxplot(Mall_Customers, col="skyblue", main="Check the outliers on original data set")
# Handling outliers: remove outliers
# print(max(Mall_Customers$Annual.Income))
Mall_Customers1 = subset(Mall_Customers, Mall_Customers$Annual.Income != max(Mall_Customers$Annual.Income))
boxplot(Mall_Customers1, col="skyblue", main="Customers Data without Outliers")
corrplot(cor(Mall_Customers1), addCoef.col = 'black', method="color")
# TODO: analysis the correlation among features
# Remove ID
Mall_Customers1 <- Mall_Customers[, -1]
head(Mall_Customers1)
# Scale() is a generic function whose default method centers and/or scales the columns of a numeric matrix.
Annual.Income.Scale <- as.data.frame(scale(Mall_Customers1$Annual.Income))
# Annual.Income.Scale
df.customers <- data.frame(Gender = Mall_Customers$Gender,
Age = Mall_Customers$Age,
Annual.Income = Annual.Income.Scale,
Spending.Score = Mall_Customers$Spending.Score)
colnames(df.customers)[3] <- "Annual.Income"
head(df.customers)
par(mfrow=c(2,2))
hist(df.customers$Gender, col = "wheat")
hist(df.customers$Age, col = "skyblue")
hist(df.customers$Annual.Income, col = "green")
hist(df.customers$Spending.Score, col = "coral2")
library(ggplot2)
# Ref: https://www.statology.org/density-curves/
# Ref: https://www.r-bloggers.com/2021/11/how-to-perform-univariate-analysis-in-r/
par(mfrow=c(2,2))
plot(density(df.customers$Gender))
plot(density(df.customers$Age))
plot(density(df.customers$Annual.Income))
plot(density(df.customers$Spending.Score))
# Ref: https://towardsdatascience.com/q-q-plots-explained-5aa8495426c0
par(mfrow=c(2,2))
ySpendingScore <- df.customers$Spending.Score
# 01 Gender-Spending.Score Q-Q Plot
xGender <- df.customers$Gender
qqplot(xGender, ySpendingScore, xlab = "Gender", ylab = "Spending.Score", main = "Gender-Spending.Score Q-Q Plot")
# qqline(ySpendingScore, col = "steelblue", lwd = 2)
# 02 Age-Spending.Score Q-Q Plot
xAge <- df.customers$Age
qqplot(xAge, ySpendingScore, xlab = "Age", ylab = "Spending.Score", main = "Age-Spending.Score Q-Q Plot")
# 03 Annual.Income-Spending.Score Q-Q Plot
xAnnualIncome <- df.customers$Annual.Income
qqplot(xAnnualIncome, ySpendingScore, xlab = "Annual.Income", ylab = "Spending.Score", main = "Annual.Income-Spending.Score Q-Q Plot")
# Remove the feature 'Gender' in our final data frame named 'df.customers' since it has no relationship with Spending.Score
df.customers <- df.customers[, -1]
head(df.customers)
genderTable <- table(Mall_Customers1$Gender)
# barplot
barplot(genderTable, main = "Gender Comparison Using BarPlot",
ylab = "Count",
xlab = "Gender",
col = rainbow(2),
legend = rownames(genderTable),
names.arg = c("Female", "Male"))
# A pie chart
pct <- round(genderTable/sum(genderTable)*100)
lbs <- paste(c("Female","Male"), " ", pct, "%", sep=" ")
library(plotrix)
pie3D(genderTable, labels=lbs, main="Pie Chart Showing Ratio of Female and Male")
summary(df.customers$Age)
# hist plot
hist(df.customers$Age,
col="blue",
main="Histogram to Show Count of Age Class",
xlab="Age Class",
ylab="Frequency",
labels=TRUE)
# boxplot plot
boxplot(df.customers$Age, col="yellow", main="Boxplot for Descriptive Analysis of Age")
summary(df.customers$Annual.Income)
hist(df.customers$Annual.Income,
col="yellow",
main="Histogram for Annual Income",
xlab="Annual Income Class",
ylab="Frequency",
labels=TRUE)
plot(density(df.customers$Annual.Income),
col="yellow",
main="Density Plot for Annual Income",
xlab="Annual Income Class",
ylab="Density")
polygon(density(df.customers$Annual.Income),
col="blue")
summary(df.customers$Spending.Score)
boxplot(df.customers$Spending.Score,
horizontal=TRUE,
col="red",
main="BoxPlot for Descriptive Analysis of Spending Score")
hist(df.customers$Spending.Score,
main="HistoGram for Spending Score",
xlab="Spending Score Class",
ylab="Frequency",
col="green",
labels=TRUE)
paste("Here are clusters on the original data set")
plot(df.customers)
library(caret)
set.seed(1)
index <- createDataPartition(df.customers$Spending.Score, p = 0.2, list = FALSE)
testDF <- df.customers[index,]
trainDF <- df.customers[-index,]
library(cluster)
library(factoextra)
# library(dbscan)
library(fpc)
fviz_nbclust(trainDF, kmeans, method="wss")
fviz_nbclust(trainDF, kmeans, method="silhouette")
k5 <- kmeans(trainDF, centers = 5, nstart = 25)
k3 <- kmeans(trainDF, centers = 3, nstart = 25)
k6 <- kmeans(trainDF, centers = 6, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k5, geom = "point", data = trainDF) + ggtitle("k = 5")
p2 <- fviz_cluster(k3, geom = "point",  data = trainDF) + ggtitle("k = 3")
p3 <- fviz_cluster(k6, geom = "point",  data = trainDF) + ggtitle("k = 6")
library(gridExtra)
grid.arrange(p1, p2, p3, nrow = 2)
cat(sprintf("1. k = 5, the Between SS / Total SS is %.3f", k5$betweenss/k5$totss), "\n")
cat(sprintf("2. k = 3, the Between SS / Total SS is %.3f", k3$betweenss/k3$totss), "\n")
cat(sprintf("3. k = 6, the Between SS / Total SS is %.3f", k6$betweenss/k6$totss), "\n")
Data_income_score_age <- df.customers
kmeansModel_income_score_age = kmeans(Data_income_score_age,6, nstart = 25)
library(scatterplot3d)
colors <- c("red", "blue", "green", "purple", "orange", "yellow")
colors <- colors[kmeansModel_income_score_age$cluster]
scatterplot3d(x = Data_income_score_age$Annual.Income,
y = Data_income_score_age$Age,
z = Data_income_score_age$Spending.Score,
box = FALSE,
color = colors,
pch=16,
<<<<<<< HEAD
main = "3D Cluster plot on the Optimal Number")
=======
main = "3D Cluster plot with Age and Annual.Income")
>>>>>>> da4d391fe8a48ff6d45065c35cd2b579432534cd
library(factoextra)
fviz_cluster(kmeansModel_income_score_age,
data = Data_income_score_age,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
<<<<<<< HEAD
# Clean environment
rm(list=ls())
# Load libraries
library(readr)
library(corrplot)
# Note! Set the new working Directory
# Every time you synchronize code from the repository, it's better to check and reset the working directory based on your development environment first. If you don't want to set the repository, you can comment the following line.
setwd("D:/WorkSpace/RWorkSpace/Project")
Mall_Customers <- read.csv("Mall_Customers.csv",
header = TRUE,
sep = ",",
stringsAsFactors=TRUE,
col.names = c("CustomerID","Gender","Age","Annual Income","Spending Score"))
# Data Exploration
## Read data
head(Mall_Customers)
## Features types
str(Mall_Customers)
# Clean environment
rm(list=ls())
# Load libraries
library(readr)
library(corrplot)
# Note! Set the new working Directory
# Every time you synchronize code from the repository, it's better to check and reset the working directory based on your development environment first. If you don't want to set the repository, you can comment the following line.
setwd("D:/WorkSpace/RWorkSpace/Project")
Mall_Customers <- read.csv("Mall_Customers.csv",
header = TRUE,
sep = ",",
stringsAsFactors=TRUE,
col.names = c("CustomerID","Gender","Age","Annual Income","Spending Score"))
# Data Exploration
## Read data
head(Mall_Customers)
## Features types
str(Mall_Customers)
# plot(Mall_Customers)
# Explore missing value patterns
# Check if there are NA values
NANumbers <- sum(is.na(Mall_Customers))
paste("**** The number of NA values in this data set =", NANumbers)
# Plotting percentage of missing values per feature
library(naniar)
gg_miss_var(Mall_Customers, show_pct = TRUE)
# Quickly summarize the values in a data frame here
summary(Mall_Customers)
#  Compactly displaying the internal structure of data frame: Mall_Customers.
# str(Mall_Customers)
# Set dummy variables
Mall_Customers$Gender<-as.integer(Mall_Customers$Gender)
# Mall_Customers <- transform(Mall_Customers, Gender = as.integer(Gender))
# Display new data frame
head(Mall_Customers)
# Handling outliers: check the outliers by the boxplotx
boxplot(Mall_Customers, col="skyblue", main="Check the outliers on original data set")
# Handling outliers: remove outliers
# print(max(Mall_Customers$Annual.Income))
Mall_Customers1 = subset(Mall_Customers, Mall_Customers$Annual.Income != max(Mall_Customers$Annual.Income))
boxplot(Mall_Customers1, col="skyblue", main="Customers Data without Outliers")
# Remove ID
Mall_Customers1 <- Mall_Customers[, -1]
head(Mall_Customers1)
# Scale() is a generic function whose default method centers and/or scales the columns of a numeric matrix.
# Annual.Income.Scale <- as.data.frame(scale(Mall_Customers1$Annual.Income))
Annual.Income.Scale <- Mall_Customers$Annual.Income
# Annual.Income.Scale
df.customers <- data.frame(Gender = Mall_Customers$Gender,
Age = Mall_Customers$Age,
Annual.Income = Annual.Income.Scale,
Spending.Score = Mall_Customers$Spending.Score)
colnames(df.customers)[3] <- "Annual.Income"
head(df.customers)
par(mfrow=c(2,2))
hist(df.customers$Gender, col = "wheat")
hist(df.customers$Age, col = "skyblue")
hist(df.customers$Annual.Income, col = "green")
hist(df.customers$Spending.Score, col = "coral2")
library(ggplot2)
# Ref: https://www.statology.org/density-curves/
# Ref: https://www.r-bloggers.com/2021/11/how-to-perform-univariate-analysis-in-r/
par(mfrow=c(2,2))
plot(density(df.customers$Gender))
plot(density(df.customers$Age))
plot(density(df.customers$Annual.Income))
plot(density(df.customers$Spending.Score))
library(ggplot2)
# Ref: https://www.statology.org/density-curves/
# Ref: https://www.r-bloggers.com/2021/11/how-to-perform-univariate-analysis-in-r/
par(mfrow=c(2,2))
plot(density(df.customers$Gender))
plot(density(df.customers$Age))
plot(density(df.customers$Annual.Income))
plot(density(df.customers$Spending.Score))
# Ref: https://towardsdatascience.com/q-q-plots-explained-5aa8495426c0
par(mfrow=c(2,2))
ySpendingScore <- df.customers$Spending.Score
# 01 Gender-Spending.Score Q-Q Plot
xGender <- df.customers$Gender
qqplot(xGender, ySpendingScore, xlab = "Gender", ylab = "Spending.Score", main = "Gender-Spending.Score Q-Q Plot")
# qqline(ySpendingScore, col = "steelblue", lwd = 2)
# 02 Age-Spending.Score Q-Q Plot
xAge <- df.customers$Age
qqplot(xAge, ySpendingScore, xlab = "Age", ylab = "Spending.Score", main = "Age-Spending.Score Q-Q Plot")
# 03 Annual.Income-Spending.Score Q-Q Plot
xAnnualIncome <- df.customers$Annual.Income
qqplot(xAnnualIncome, ySpendingScore, xlab = "Annual.Income", ylab = "Spending.Score", main = "Annual.Income-Spending.Score Q-Q Plot")
paste("Here are clusters on the original data set")
plot(df.customers)
library(caret)
set.seed(1)
index <- createDataPartition(df.customers$Spending.Score, p = 0.2, list = FALSE)
testDF <- df.customers[index,]
trainDF <- df.customers[-index,]
fviz_nbclust(trainDF, kmeans, method="silhouette")
# Clean environment
rm(list=ls())
# Load libraries
library(readr)
library(corrplot)
# Note! Set the new working Directory
# Every time you synchronize code from the repository, it's better to check and reset the working directory based on your development environment first. If you don't want to set the repository, you can comment the following line.
setwd("D:/WorkSpace/RWorkSpace/Project")
Mall_Customers <- read.csv("Mall_Customers.csv",
header = TRUE,
sep = ",",
stringsAsFactors=TRUE,
col.names = c("CustomerID","Gender","Age","Annual Income","Spending Score"))
# Data Exploration
## Read data
head(Mall_Customers)
## Features types
str(Mall_Customers)
# plot(Mall_Customers)
# Explore missing value patterns
# Check if there are NA values
NANumbers <- sum(is.na(Mall_Customers))
paste("**** The number of NA values in this data set =", NANumbers)
# Plotting percentage of missing values per feature
library(naniar)
gg_miss_var(Mall_Customers, show_pct = TRUE)
# Quickly summarize the values in a data frame here
summary(Mall_Customers)
#  Compactly displaying the internal structure of data frame: Mall_Customers.
# str(Mall_Customers)
# Set dummy variables
Mall_Customers$Gender<-as.integer(Mall_Customers$Gender)
# Mall_Customers <- transform(Mall_Customers, Gender = as.integer(Gender))
# Display new data frame
head(Mall_Customers)
# Handling outliers: check the outliers by the boxplotx
boxplot(Mall_Customers, col="skyblue", main="Check the outliers on original data set")
# Handling outliers: remove outliers
# print(max(Mall_Customers$Annual.Income))
Mall_Customers1 = subset(Mall_Customers, Mall_Customers$Annual.Income != max(Mall_Customers$Annual.Income))
boxplot(Mall_Customers1, col="skyblue", main="Customers Data without Outliers")
corrplot(cor(Mall_Customers1), addCoef.col = 'black', method="color")
# TODO: analysis the correlation among features
# Remove ID
Mall_Customers1 <- Mall_Customers[, -1]
head(Mall_Customers1)
# Scale() is a generic function whose default method centers and/or scales the columns of a numeric matrix.
# Annual.Income.Scale <- as.data.frame(scale(Mall_Customers1$Annual.Income))
Annual.Income.Scale <- Mall_Customers$Annual.Income
# Annual.Income.Scale
df.customers <- data.frame(Gender = Mall_Customers$Gender,
Age = Mall_Customers$Age,
Annual.Income = Annual.Income.Scale,
Spending.Score = Mall_Customers$Spending.Score)
colnames(df.customers)[3] <- "Annual.Income"
head(df.customers)
par(mfrow=c(2,2))
hist(df.customers$Gender, col = "wheat")
hist(df.customers$Age, col = "skyblue")
hist(df.customers$Annual.Income, col = "green")
hist(df.customers$Spending.Score, col = "coral2")
library(ggplot2)
# Ref: https://www.statology.org/density-curves/
# Ref: https://www.r-bloggers.com/2021/11/how-to-perform-univariate-analysis-in-r/
par(mfrow=c(2,2))
plot(density(df.customers$Gender))
plot(density(df.customers$Age))
plot(density(df.customers$Annual.Income))
plot(density(df.customers$Spending.Score))
# Ref: https://towardsdatascience.com/q-q-plots-explained-5aa8495426c0
par(mfrow=c(2,2))
ySpendingScore <- df.customers$Spending.Score
# 01 Gender-Spending.Score Q-Q Plot
xGender <- df.customers$Gender
qqplot(xGender, ySpendingScore, xlab = "Gender", ylab = "Spending.Score", main = "Gender-Spending.Score Q-Q Plot")
# qqline(ySpendingScore, col = "steelblue", lwd = 2)
# 02 Age-Spending.Score Q-Q Plot
xAge <- df.customers$Age
qqplot(xAge, ySpendingScore, xlab = "Age", ylab = "Spending.Score", main = "Age-Spending.Score Q-Q Plot")
# 03 Annual.Income-Spending.Score Q-Q Plot
xAnnualIncome <- df.customers$Annual.Income
qqplot(xAnnualIncome, ySpendingScore, xlab = "Annual.Income", ylab = "Spending.Score", main = "Annual.Income-Spending.Score Q-Q Plot")
# Remove the feature 'Gender' in our final data frame named 'df.customers' since it has no relationship with Spending.Score
df.customers <- df.customers[, -1]
head(df.customers)
genderTable <- table(Mall_Customers1$Gender)
# barplot
barplot(genderTable, main = "Gender Comparison Using BarPlot",
ylab = "Count",
xlab = "Gender",
col = rainbow(2),
legend = rownames(genderTable),
names.arg = c("Female", "Male"))
# A pie chart
pct <- round(genderTable/sum(genderTable)*100)
lbs <- paste(c("Female","Male"), " ", pct, "%", sep=" ")
library(plotrix)
pie3D(genderTable, labels=lbs, main="Pie Chart Showing Ratio of Female and Male")
summary(df.customers$Age)
# hist plot
hist(df.customers$Age,
col="blue",
main="Histogram to Show Count of Age Class",
xlab="Age Class",
ylab="Frequency",
labels=TRUE)
# boxplot plot
boxplot(df.customers$Age, col="yellow", main="Boxplot for Descriptive Analysis of Age")
summary(df.customers$Annual.Income)
hist(df.customers$Annual.Income,
col="yellow",
main="Histogram for Annual Income",
xlab="Annual Income Class",
ylab="Frequency",
labels=TRUE)
plot(density(df.customers$Annual.Income),
col="yellow",
main="Density Plot for Annual Income",
xlab="Annual Income Class",
ylab="Density")
polygon(density(df.customers$Annual.Income),
col="blue")
summary(df.customers$Spending.Score)
boxplot(df.customers$Spending.Score,
horizontal=TRUE,
col="red",
main="BoxPlot for Descriptive Analysis of Spending Score")
hist(df.customers$Spending.Score,
main="HistoGram for Spending Score",
xlab="Spending Score Class",
ylab="Frequency",
col="green",
labels=TRUE)
paste("Here are clusters on the original data set")
plot(df.customers)
library(caret)
set.seed(1)
index <- createDataPartition(df.customers$Spending.Score, p = 0.2, list = FALSE)
testDF <- df.customers[index,]
trainDF <- df.customers[-index,]
library(cluster)
library(factoextra)
# library(dbscan)
library(fpc)
fviz_nbclust(trainDF, kmeans, method="wss")
fviz_nbclust(trainDF, kmeans, method="silhouette")
k5 <- kmeans(trainDF, centers = 5, nstart = 25)
k3 <- kmeans(trainDF, centers = 3, nstart = 25)
k6 <- kmeans(trainDF, centers = 6, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k5, geom = "point", data = trainDF) + ggtitle("k = 5")
p2 <- fviz_cluster(k3, geom = "point",  data = trainDF) + ggtitle("k = 3")
p3 <- fviz_cluster(k6, geom = "point",  data = trainDF) + ggtitle("k = 6")
library(gridExtra)
grid.arrange(p1, p2, p3, nrow = 2)
cat(sprintf("1. k = 5, the Between SS / Total SS is %.3f", k5$betweenss/k5$totss), "\n")
cat(sprintf("2. k = 3, the Between SS / Total SS is %.3f", k3$betweenss/k3$totss), "\n")
cat(sprintf("3. k = 6, the Between SS / Total SS is %.3f", k6$betweenss/k6$totss), "\n")
Data_income_score_age <- df.customers
kmeansModel_income_score_age = kmeans(Data_income_score_age,6, nstart = 25)
library(scatterplot3d)
colors <- c("red", "blue", "green", "purple", "orange", "yellow")
colors <- colors[kmeansModel_income_score_age$cluster]
scatterplot3d(x = Data_income_score_age$Annual.Income,
y = Data_income_score_age$Age,
z = Data_income_score_age$Spending.Score,
box = FALSE,
color = colors,
pch=16,
main = "3D Cluster plot on the Optimal Number")
=======
cat(sprintf("3. k = 6, the Between SS / Total SS is %.3f", kmeansModel_income_score_age$betweenss/kmeansModel_income_score_age$totss), "\n")
cat(sprintf("k = 6, the Between SS / Total SS is %.3f", kmeansModel_income_score_gender$betweenss/kmeansModel_income_score_gender$totss), "\n")
Data_income_score_gender = Mall_Customers1[,-2]
kmeansModel_income_score_gender= kmeans(Data_income_score_gender,6, nstart = 25)
library(scatterplot3d)
colors <- c("red", "blue", "green","purple","orange","yellow")
colors <- colors[kmeansModel_income_score_gender$cluster]
scatterplot3d(x=Data_income_score_gender,box = FALSE,color=colors,pch=16,main = "3D Cluster plot with Gender and Annual.Income")
>>>>>>> da4d391fe8a48ff6d45065c35cd2b579432534cd
library(factoextra)
fviz_cluster(kmeansModel_income_score_age,
data = Data_income_score_age,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
<<<<<<< HEAD
The Q-Q plot is a graphical tool to help us assess if a set of data plausibly came from some theoretical distribution such as a normal or exponential. According the output of the Q-Q Plot below, we see there are approximately linear relationship on (Spending.Score, age), (Spending.Score, Annual.Income). For the relationship on (Spending.Score, gender), we clearly see the coefficients are zero. Thus, there's no linear or exponential relationship. As we know that Q-Q Plot is just a visual check, not an air-tight proof, it is somewhat subjective. But it allows us to see at-a-glance if our assumption is plausible, and if not, how the assumption is violated and what data points contribute to the violation. Based on the visualization on gender, given we perform clustering on 'Gender' and 'Spending.Score',   .
=======
cat(sprintf("k = 6, the Between SS / Total SS is %.3f", kmeansModel_income_score_gender$betweenss/kmeansModel_income_score_gender$totss), "\n")
kmeansModel_all= kmeans(Mall_Customers1,6, nstart = 25)
library(factoextra)
fviz_cluster(kmeansModel_all, data = Mall_Customers1,
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Clusters using all features"
)
cat(sprintf("k = 6, the Between SS / Total SS is %.3f", kmeansModel_all$betweenss/kmeansModel_all$totss), "\n")
View(trainDF)
View(testDF)
>>>>>>> da4d391fe8a48ff6d45065c35cd2b579432534cd
